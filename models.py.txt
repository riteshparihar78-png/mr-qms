from django.db import models
from django.contrib.auth.models import AbstractUser

# Custom User with Roles
class User(AbstractUser):
    ROLE_CHOICES = [
        ("RITES_ADMIN", "RITES Admin"),
        ("RITES_QM", "RITES Quality Manager"),
        ("MCF_ADMIN", "MCF Admin"),
    ]
    role = models.CharField(max_length=20, choices=ROLE_CHOICES, default="RITES_QM")

    def __str__(self):
        return f"{self.username} ({self.role})"

# Shop Strength (Required manpower)
class ShopStrength(models.Model):
    shop_name = models.CharField(max_length=50, unique=True)
    strength = models.IntegerField()
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"{self.shop_name} - {self.strength}"

# Coach Details
class Coach(models.Model):
    sno = models.IntegerField(unique=True)  # Serial number acts as ID
    coach_type = models.CharField(max_length=100)
    coach_number = models.Char(max_length=100)
    bogie_no1 = models.CharField(max_length=50, blank=True)
    bogie_no2 = models.CharField(max_length=50, blank=True)
    wheelset_no1 = models.CharField(max_length=50, blank=True)
    wheelset_no2 = models.CharField(max_length=50, blank=True)
    wheelset_no3 = models.CharField(max_length=50, blank=True)
    wheelset_no4 = models.CharField(max_length=50, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"{self.sno} - {self.coach_type} {self.coach_number}"

# Inspection / QCI
class Inspection(models.Model):
    SHOP_CHOICES = [
        ("Shell", "Shell"),
        ("Bogie", "Bogie"),
        ("Wheel", "Wheel"),
        ("Paint", "Paint"),
        ("Furnishing", "Furnishing"),
        ("Electrical", "Electrical"),
    ]
    coach = models.ForeignKey(Coach, on_delete=models.CASCADE)
    shop = models.CharField(max_length=50, choices=SHOP_CHOICES)
    inspector_name = models.CharField(max_length=100)
    qci_date = models.DateField()
    cross_date = models.DateField(null=True, blank=True)
    accepted_date = models.DateField(null=True, blank=True)
    remarks = models.TextField(blank=True)

    def __str__(self):
        return f"{self.coach} - {self.shop} ({self.qci_date})"

# Defects
class Defect(models.Model):
    DEFECT_CHOICES = [
        ("Welding Defect", "Welding Defect"),
        ("Mismatch", "Mismatch"),
        ("Fitment Issue", "Fitment Issue"),
        ("Dimensional Deviation", "Dimensional Deviation"),
        ("Material Defect", "Material Defect"),
        ("Surface Finish Issue", "Surface Finish Issue"),
        ("Paint Defect", "Paint Defect"),
        ("Electrical Defect", "Electrical Defect"),
        ("Functional Test Failure", "Functional Test Failure"),
        ("Others", "Others"),
    ]
    inspection = models.ForeignKey(Inspection, on_delete=models.CASCADE, related_name="defects")
    defect_type = models.CharField(max_length=100, choices=DEFECT_CHOICES)
    count = models.IntegerField(default=1)

    def __str__(self):
        return f"{self.defect_type} ({self.count})"

# Attendance
class Attendance(models.Model):
    date = models.DateField()
    shop = models.CharField(max_length=50)
    present = models.IntegerField()
    absent = models.IntegerField()
    percent = models.FloatField()

    def __str__(self):
        return f"{self.shop} - {self.date}: {self.present}/{self.present + self.absent}"

# Feedback
class Feedback(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    date = models.DateTimeField(auto_now_add=True)
    feedback_type = models.CharField(max_length=50)  # Bug / Improvement / Other
    text = models.TextField()

    def __str__(self):
        return f"Feedback by {self.user} on {self.date}"